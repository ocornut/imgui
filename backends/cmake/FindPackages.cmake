find_package(glfw3 QUIET)
if (glfw3_FOUND)
    message(STATUS "Found glfw3 ${glfw3_VERSION}")
    set(HAS_IMGUI_GLFW3 ON)
    set(HAS_IMGUI_GLFW3 ON PARENT_SCOPE)
else ()
    message(WARNING "glfw3 not found")
endif ()

find_package(OpenGL QUIET)
if (OpenGL_FOUND)
    message(STATUS "Found OpenGL")
    set(HAS_IMGUI_OPENGL ON)
    set(HAS_IMGUI_OPENGL ON PARENT_SCOPE)
else ()
    message(WARNING "OpenGL not found")
endif ()

find_package(SDL2 QUIET)
if (SDL2_FOUND)
    message(STATUS "Found SDL2 ${SDL2_VERSION}")
    set(HAS_IMGUI_SDL2 ON)
    set(HAS_IMGUI_SDL2 ON PARENT_SCOPE)
else ()
    message(WARNING "SDL2 not found")
endif ()

find_package(SDL3 QUIET)
if (SDL3_FOUND)
    message(STATUS "Found SDL3 ${SDL3_VERSION}")
    set(HAS_IMGUI_SDL3 ON)
    set(HAS_IMGUI_SDL3 ON PARENT_SCOPE)
else ()
    message(WARNING "SDL3 not found")
endif ()

find_package(Vulkan QUIET)
if (Vulkan_FOUND)
    message(STATUS "Found Vulkan ${Vulkan_VERSION}")
    set(HAS_IMGUI_VULKAN ON)
    set(HAS_IMGUI_VULKAN ON PARENT_SCOPE)
else ()
    message(WARNING "Vulkan not found")
endif ()

find_package(Allegro QUIET)
if (Allegro_FOUND)
    message(STATUS "Found Allegro ${Allegro_VERSION}")
    set(HAS_IMGUI_ALLEGRO ON)
    set(HAS_IMGUI_ALLEGRO ON PARENT_SCOPE)
else ()
    message(WARNING "Allegro not found")
endif ()

find_package(GLUT QUIET)
if (GLUT_FOUND)
    message(STATUS "Found GLUT ${PC_GLUT_VERSION}")
    set(HAS_IMGUI_GLUT ON)
    set(HAS_IMGUI_GLUT ON PARENT_SCOPE)
else ()
    find_package(FreeGLUT QUIET)
    if (FreeGLUT_FOUND)
        message(STATUS "Found FreeGLUT ${FreeGLUT_VERSION}")
        set(HAS_IMGUI_GLUT ON)
        set(HAS_IMGUI_GLUT ON PARENT_SCOPE)
    else ()
        message(WARNING "GLUT not found")
    endif ()
endif ()

if (EMSCRIPTEN)
    if (NOT EMSCRIPTEN_VERSION)
        message(FATAL_ERROR "EMSCRIPTEN_VERSION not found")
    endif ()
    if (EMSCRIPTEN_VERSION VERSION_LESS "3.1.43")
        message(FATAL_ERROR "ImGui requires Emscripten version >= 3.1.43, found ${EMSCRIPTEN_VERSION}")
    endif ()
    set(HAS_IMGUI_EMSCRIPTEN ON)
    set(HAS_IMGUI_EMSCRIPTEN ON PARENT_SCOPE)
    message(STATUS "Found emscripten ${EMSCRIPTEN_VERSION}")
else ()
    message(WARNING "emscripten not found. `cmake -DCMAKE_TOOLCHAIN_FILE=emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake ...`")
endif ()

find_package(Dawn QUIET)
if (Dawn_FOUND)
    message(STATUS "Found Dawn")
    set(HAS_IMGUI_DAWN ON)
    set(HAS_IMGUI_DAWN ON PARENT_SCOPE)
else ()
    message(WARNING "Dawn not found")
endif ()

if (ANDROID_NDK)
    message(STATUS "Found ANDROID_NDK ${CMAKE_ANDROID_NDK_VERSION} at ${ANDROID_NDK}.")
else ()
    message(WARNING "ANDROID_NDK not provided. `cmake -DCMAKE_TOOLCHAIN_FILE=android-ndk/build/cmake/android.toolchain.cmake ...`")
endif ()

function (find_directx NAME INCLUDE_FILE LIBS_NAMES)
    find_path(${NAME}_INCLUDE_DIR ${INCLUDE_FILE}
    PATHS "$ENV{WindowsSdkDir}/Include/$ENV{WindowsSDKVersion}"
    PATH_SUFFIXES um
    NO_CACHE
    NO_DEFAULT_PATH)

    if (CMAKE_GENERATOR_PLATFORM STREQUAL "win32")
        find_library(${NAME}_X86_LIBRARY ${LIBS_NAMES}
        PATHS "$ENV{WindowsSdkDir}/Lib/$ENV{WindowsSDKVersion}"
        PATH_SUFFIXES um/x86
        NO_CACHE
        NO_DEFAULT_PATH)

        if (NOT ${${NAME}_INCLUDE_DIR} STREQUAL "" AND NOT ${${NAME}_X86_LIBRARY} STREQUAL "")
            set(HAS_IMGUI_${NAME}_X86 ON)
            set(HAS_IMGUI_${NAME}_X86 ON PARENT_SCOPE)
            set(IMGUI_${NAME}_X86_INCLUDE_DIR ${${NAME}_INCLUDE_DIR})
            set(IMGUI_${NAME}_X86_INCLUDE_DIR ${${NAME}_INCLUDE_DIR} PARENT_SCOPE)
            get_filename_component(${NAME}_X86_LIB_DIR "${${NAME}_X86_LIBRARY}" DIRECTORY)
            set(IMGUI_${NAME}_X86_LIB_DIR ${${NAME}_X86_LIB_DIR})
            set(IMGUI_${NAME}_X86_LIB_DIR ${${NAME}_X86_LIB_DIR} PARENT_SCOPE)
            set(IMGUI_${NAME}_X86_LIBRARIES ${LIBS_NAMES})
            set(IMGUI_${NAME}_X86_LIBRARIES ${LIBS_NAMES} PARENT_SCOPE)
        endif ()
    else ()
        find_library(${NAME}_X64_LIBRARY ${LIBS_NAMES}
        PATHS "$ENV{WindowsSdkDir}/Lib/$ENV{WindowsSDKVersion}"
        PATH_SUFFIXES um/x64
        NO_CACHE
        NO_DEFAULT_PATH)

        if (NOT ${${NAME}_INCLUDE_DIR} STREQUAL "" AND NOT ${${NAME}_X64_LIBRARY} STREQUAL "")
            set(HAS_IMGUI_${NAME}_X64 ON)
            set(HAS_IMGUI_${NAME}_X64 ON PARENT_SCOPE)
            set(IMGUI_${NAME}_X64_INCLUDE_DIR ${${NAME}_INCLUDE_DIR})
            set(IMGUI_${NAME}_X64_INCLUDE_DIR ${${NAME}_INCLUDE_DIR} PARENT_SCOPE)
            get_filename_component(${NAME}_X64_LIB_DIR "${${NAME}_X64_LIBRARY}" DIRECTORY)
            set(IMGUI_${NAME}_X64_LIB_DIR ${${NAME}_X64_LIB_DIR})
            set(IMGUI_${NAME}_X64_LIB_DIR ${${NAME}_X64_LIB_DIR} PARENT_SCOPE)
            set(IMGUI_${NAME}_X64_LIBRARIES ${LIBS_NAMES})
            set(IMGUI_${NAME}_X64_LIBRARIES ${LIBS_NAMES} PARENT_SCOPE)
        endif ()
    endif ()
endfunction ()


if (MSVC)
    find_directx(DIRECTX_9 d3d.h d3d9)
    find_directx(DIRECTX_10 d3d10.h "d3d10;d3dcompiler")
    find_directx(DIRECTX_11 d3d11.h "d3d11;d3dcompiler")
    find_directx(DIRECTX_12 d3d12.h "d3d12;d3dcompiler;dxgi")

    if (${HAS_IMGUI_DIRECTX_9_X64})
        message(STATUS "Found DirectX 9 x64")
    else ()
        message(WARNING "DirectX 9 x64 not found")
    endif ()
    if (${HAS_IMGUI_DIRECTX_9_X86})
        message(STATUS "Found DirectX 9 x86")
    else ()
        message(WARNING "DirectX 9 x86 not found")
    endif ()

    if (${HAS_IMGUI_DIRECTX_10_X64})
        message(STATUS "Found DirectX 10 x64")
    else ()
        message(WARNING "DirectX 10 x64 not found")
    endif ()
    if (${HAS_IMGUI_DIRECTX_10_X86})
        message(STATUS "Found DirectX 10 x86")
    else ()
        message(WARNING "DirectX 10 x86 not found")
    endif ()

    if (${HAS_IMGUI_DIRECTX_11_X64})
        message(STATUS "Found DirectX 11 x64")
    else ()
        message(WARNING "DirectX 11 x64 not found")
    endif ()
    if (${HAS_IMGUI_DIRECTX_11_X86})
        message(STATUS "Found DirectX 11 x86")
    else ()
        message(WARNING "DirectX 11 x86 not found")
    endif ()

    if (${HAS_IMGUI_DIRECTX_12_X64})
        message(STATUS "Found DirectX 12 x64")
    else ()
        message(WARNING "DirectX 12 x64 not found")
    endif ()
    if (${HAS_IMGUI_DIRECTX_12_X86})
        message(STATUS "Found DirectX 12 x86")
    else ()
        message(WARNING "DirectX 12 x86 not found")
    endif ()
endif ()
